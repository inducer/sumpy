# Sumpy thus far is poorly parallelized (no workgroup-level parallelism), and
# the Kepler has a tendency to hang as a result.
#
# Python 3.5 K40:
#   script:
#   - export PY_EXE=python3.5
#   - export PYOPENCL_TEST=nvi:k40
#   - export EXTRA_INSTALL="numpy mako"
#   - curl -L -O https://gitlab.tiker.net/inducer/ci-support/raw/main/build-and-test-py-project.sh
#   - ". ./build-and-test-py-project.sh"
#   tags:
#   - python3.5
#   - nvidia-k40
#   except:
#   - tags
#  artifacts:
#    reports:
#      junit: test/pytest.xml

stages:
  - test
  - deploy

Pytest POCL:
  stage: test
  script:
  - export PY_EXE=python3
  - export PYOPENCL_TEST=portable:pthread
  - export EXTRA_INSTALL="pybind11 numpy mako mpi4py"
  - curl -L -O https://gitlab.tiker.net/inducer/ci-support/raw/main/build-and-test-py-project.sh
  - ". ./build-and-test-py-project.sh"
  tags:
  - python3
  - pocl
  except:
  - tags
  artifacts:
    reports:
      junit: test/pytest.xml

Pytest Titan V:
  stage: test
  script:
  - py_version=3
  - export PYOPENCL_TEST=nvi:titan
  - EXTRA_INSTALL="pybind11 numpy mako mpi4py"
  - curl -L -O https://gitlab.tiker.net/inducer/ci-support/raw/main/build-and-test-py-project.sh
  - ". ./build-and-test-py-project.sh"
  tags:
  - python3
  - nvidia-titan-v
  except:
  - tags
  allow_failure: True
  artifacts:
    reports:
      junit: test/pytest.xml

Pytest Conda:
  stage: test
  script:
  # Disable caching to ensure SymEngine code generation is exercised.
  - export SUMPY_NO_CACHE=1
  - export SUMPY_FORCE_SYMBOLIC_BACKEND=symengine
  - export PYOPENCL_TEST=portable:pthread
  - curl -L -O https://gitlab.tiker.net/inducer/ci-support/raw/main/build-and-test-py-project-within-miniconda.sh
  - ". ./build-and-test-py-project-within-miniconda.sh"
  tags:
  - large-node
  except:
  - tags
  artifacts:
    reports:
      junit: test/pytest.xml

Pytest POCL Titan V:
  stage: test
  script:
  # Disable caching to ensure SymEngine code generation is exercised.
  - export SUMPY_NO_CACHE=1
  - export SUMPY_FORCE_SYMBOLIC_BACKEND=symengine
  - export PYOPENCL_TEST=portable:titan
  - curl -L -O https://gitlab.tiker.net/inducer/ci-support/raw/main/build-and-test-py-project-within-miniconda.sh
  - ". ./build-and-test-py-project-within-miniconda.sh"
  tags:
  - nvidia-titan-v
  except:
  - tags
  artifacts:
    reports:
      junit: test/pytest.xml

Examples Conda:
  stage: test
  script: |
    grep -v symengine .test-conda-env-py3.yml > .test-conda-env.yml
    CONDA_ENVIRONMENT=.test-conda-env.yml
    curl -L -O https://tiker.net/ci-support-v0
    . ci-support-v0
    EXTRA_INSTALL="pyvisfile scipy"
    build_py_project_in_conda_env
    run_examples
  tags:
  - large-node
  except:
  - tags

Documentation:
  stage: deploy
  script: |
    EXTRA_INSTALL="pybind11 numpy mako"
    curl -L -O https://tiker.net/ci-support-v0
    . ci-support-v0
    build_py_project_in_venv
    build_docs
    build_asv_html
    maybe_upload_docs
  tags:
  - linux

Flake8:
  stage: test
  script:
  - curl -L -O https://gitlab.tiker.net/inducer/ci-support/raw/main/prepare-and-run-flake8.sh
  - . ./prepare-and-run-flake8.sh "$CI_PROJECT_NAME" test examples benchmarks
  tags:
  - python3
  except:
  - tags

Pylint:
  script:
  - EXTRA_INSTALL="pybind11 numpy mako scipy matplotlib pyvisfile mpi4py"
  - curl -L -O https://tiker.net/ci-support-v0
  - . ci-support-v0
  - build_py_project
  - run_pylint "$(basename $GITHUB_REPOSITORY)" examples/*.py, test/*.py
  tags:
  - python3
  except:
  - tags

Downstream:
  parallel:
    matrix:
    - DOWNSTREAM_PROJECT: [pytential]
  tags:
  - large-node
  - "docker-runner"
  script: |
    curl -L -O https://tiker.net/ci-support-v0
    . ./ci-support-v0
    test_downstream "$DOWNSTREAM_PROJECT"

# vim: sw=2
